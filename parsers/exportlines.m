function exportlines(fn, outdir)

## Usage: export(fn, outdir)
##
## Exports MARSIS to JSON files containing one line each.
##
## Export a lot of files like this:
##
##  >> cellfun(@(x) @export(x, "outputdir"), glob("/path/to/files/000*"))
##

if (nargin() == 1)
  outdir = '.'
endif

[ ORBIT_NUMBER, ...
           OST_LINE_NUMBER, ...
           FRAME_ID, ...
           SCET_FRAME_WHOLE, ...
           SCET_FRAME_FRAC, ...
           CENTRAL_FREQUENCY, ...
           MARS_SOLAR_LONGITUDE, ...
           SPACECRAFT_ALTITUDE, ...
           SUB_SC_LONGITUDE, ...
           SUB_SC_LATITUDE, ...
           LOCAL_TRUE_SOLAR_TIME, ...
           SOLAR_ZENITH_ANGLE, ...
           FOOTPRINT_CENTER_LONGITUDE, ...
           FOOTPRINT_CENTER_LATITUDE, ...
           FOOTPRINT_VERTEX_LONGITUDE, ...
           FOOTPRINT_VERTEX_LATITUDE, ...
           ROUGHNESS_WITHIN_FOOTPRINT, ...
           INCIDENCE_ANGLE, ...
           FRESNEL_RADIUS, ...
           ECHO_MODULUS_MINUS1_F1_NO_IONO, ...
           ECHO_MODULUS_ZERO_F1_NO_IONO, ...
           ECHO_MODULUS_PLUS1_F1_NO_IONO, ...
           ECHO_MODULUS_MINUS1_F2_NO_IONO, ...
           ECHO_MODULUS_ZERO_F2_NO_IONO, ...
           ECHO_MODULUS_PLUS1_F2_NO_IONO, ...
           ECHO_MODULUS_MINUS1_F1_IONO, ...
           ECHO_MODULUS_ZERO_F1_IONO, ...
           ECHO_MODULUS_PLUS1_F1_IONO, ...
           ECHO_MODULUS_MINUS1_F2_IONO, ...
           ECHO_MODULUS_ZERO_F2_IONO, ...
           ECHO_MODULUS_PLUS1_F2_IONO, ...
           ECHO_MODULUS_MINUS1_F1_SIM, ...
           ECHO_MODULUS_ZERO_F1_SIM, ...
           ECHO_MODULUS_PLUS1_F1_SIM, ...
           ECHO_MODULUS_MINUS1_F2_SIM, ...
           ECHO_MODULUS_ZERO_F2_SIM, ...
           ECHO_MODULUS_PLUS1_F2_SIM ] = readmarsiscdr(fn);

% Sort the data into orbits and lines
data = struct();
for i = 1:size(FRAME_ID, 2)
  d = struct();
  d.lat = SUB_SC_LATITUDE(i);
  d.lon = SUB_SC_LONGITUDE(i);
  d.alt = SPACECRAFT_ALTITUDE(i);
  d.iono = ECHO_MODULUS_ZERO_F1_IONO(:,i);
  d.sim = ECHO_MODULUS_ZERO_F1_SIM(:,i);
  data.(int2str(ORBIT_NUMBER(i))).(int2str(OST_LINE_NUMBER(i))).(int2str(FRAME_ID(i))) = d;
endfor

for [lines, orbitID] = data
  for [line, lineID] = lines
    % The IDs are strings; if you put %d in printf, the printf runs multiple times
    outfilename = fullfile(outdir, sprintf("%s,%s", orbitID, lineID));
    f = fopen(outfilename, 'w');
    fprintf(f, '{ "orbit": %s, "line": %s, "frames": [', orbitID, lineID);
    i = 0;
    for [frame, frameID] = line
      if (i > 0)
        fprintf(f, ',');
      else
        i = 1;
      endif
      fprintf(f, '{"frame": %s, "lat": %f, "lon": %f, "alt": %f, "iono": [', ...
          frameID, frame.lat, frame.lon, frame.alt);
      iono = frame.iono;
      for j = 1:size(iono)
        if (j == 1)
          fprintf(f, "%g", iono(j));
        else
          fprintf(f, ", %g", iono(j));
        endif
      endfor
      fprintf(f, '],\n"sim":[');
      sim = frame.sim;
      for j = 1:size(sim)
        if (j == 1)
          fprintf(f, "%g", sim(j));
        else
          fprintf(f, ", %g", sim(j));
        endif
      endfor
      fprintf(f, ']} ');
    endfor
    fprintf(f, "]}");
    fclose(f);
  endfor
endfor

endfunction
